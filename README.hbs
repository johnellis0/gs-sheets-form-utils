# Google Scripts Spreadsheet Form Utilities
Google Scripts utility library for using Google Forms with Google Sheets.

Features:
- Detect & remove/flag duplicate submissions
- Split form submissions into per-month / per-year sheets
- Move submissions to bottom of specific sheet, allowing both form submissions and manual entries to be ordered sequentially
- Automatically archive submissions
- Check if row is blank despite checkbox data validations

# Install

## As library

To install as a library directly in Google Scripts follow the below instructions:

*Google Scripts Editor > Resources > Libraries > Enter **Script ID** in Add a library > Select latest version > Save*

**Script ID:** `1Rez6KOQDFg6RpI1sNXoaxSneLcwjXUT4eHTROuYcE5L9BuTs1D06pcbn`

![image](https://user-images.githubusercontent.com/34400721/101267807-fb6df500-3754-11eb-80da-c423aaf38c27.png)

If you install like this you will need to prefix all the methods by whatever is in the **Identifier** box, with the default being FormUtils.

```javascript
function onFormSubmit(e){
    var range = e.range;
    var sheet = FormUtils.getPeriodicSheet("month");

    range = FormUtils.moveToFirstEmptyRow(range, sheet);
}
```

## Manually

You can also copy the source file, `src/FormUtils.js` directly into your Scripts project.

If you install via this method you do not have to prefix the methods with a module name, example:

```javascript
function onFormSubmit(e){
    var range = e.range;
    var sheet = getPeriodicSheet("month");

    range = moveToFirstEmptyRow(range, sheet);
}
```

# Example usage

## Move form submissions onto monthly sheets

This will move the form submissions onto a different sheet each month.

```javascript
function onFormSubmit(e){
    var range = e.range;
    var sheet = FormUtils.getPeriodicSheet("month");

    range = FormUtils.moveToFirstEmptyRow(range, sheet);
}
```

## Highlight duplicated submissions

This will highlight any duplicate entries.

This uses a digest column which is appended to the end of the moved range, this column can be hidden on the sheet if you don't want it visible.

Using a digest column improves performance as only one column needs to be checked vs how many are in the range.

### Calculate duplicate yourself

This allows for more customization of actions to take if it is a duplicate; eg. not moving the range at all.

```javascript
function onFormSubmit(e){
    var range = e.range;
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Responses");

    var duplicate = FormUtils.isDuplicate(range, sheet);

    range = FormUtils.moveToFirstEmptyRow(range, sheet);
    range = FormUtils.addDigest(range);

    if(duplicate)
        range.setBackground("red");
}
```

### Using duplicate callback

`moveToFirstEmptyRow` and `copyToFirstEmptyRow` can take a callback as the 4th argument which will be ran if the range is detected as a duplicate. The 3rd argument is whether to use a digest column or not. More info and examples available in the API Reference below.

```javascript
function onFormSubmit(e){
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Responses");

    FormUtils.moveToFirstEmptyRow(e.range, sheet, true, (range) => { // Move range to sheet "Responses" with callback if duplicate
        range.setBackground("red"); // Highlight moved range in red if it is a duplicate
    })
}
```

## Process form submissions in bulk

```javascript
function scheduledBulkProcess(){
    var submissionsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Responses");

    var sheet = FormUtils.getPeriodicSheet("month");


}
```

# API Reference
{{>main}}

#About
### Authors
- John Ellis - [GitHub](https://github.com/johnellis0) / [Portfolio](https://johnellis.dev)

### License
Released under [MIT](/LICENSE)
